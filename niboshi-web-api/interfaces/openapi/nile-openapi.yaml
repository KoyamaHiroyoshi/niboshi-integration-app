openapi: 3.0.3
info:
  title: NILE API定義
  description: |-
    NILEサーバーのAPI定義
  contact:
    email: example@example.com
  version: 1.0.0
servers:
  - url: https://localhost:8080
tags:
  - name: players
    description: プレイヤー関連API
  - name: leagues
    description: リーグ関連API
  - name: games
    description: ゲーム関連API
paths:
  # プレイヤー関連API
  /players:
    post:
      tags:
        - players
      summary: プレイヤー登録
      description: プレイヤーを新規登録する
      operationId: createPlayers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePlayersRequest"
        required: true
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid request
    get:
      tags:
        - players
      summary: プレイヤー一覧取得
      description: 登録されているプレイヤーの一覧を取得する
      operationId: findAllPlayers
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Players"
        "400":
          description: Invalid request

  /players/{playerId}:
    get:
      tags:
        - players
      summary: プレイヤー取得
      description: 指定したプレイヤーの情報を取得する
      operationId: findPlayer
      parameters:
        - name: playerId
          in: path
          description: プレイヤーID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Player"
        "400":
          description: Invalid request
        "404":
          description: Player not found
    put:
      tags:
        - players
      summary: プレイヤー更新
      description: 指定したプレイヤーの情報を更新する
      operationId: updatePlayer
      parameters:
        - name: playerId
          in: path
          description: プレイヤーID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePlayerRequest"
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid request
        "404":
          description: Player not found
    delete:
      tags:
        - players
      summary: プレイヤー削除
      description: 指定したプレイヤーの情報を削除する
      operationId: deletePlayer
      parameters:
        - name: playerId
          in: path
          description: プレイヤーID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid request
        "404":
          description: Player not found

  # リーグ関連API

  /leagues:
    post:
      tags:
        - leagues
      summary: リーグ登録
      description: リーグを新規登録する
      operationId: createLeagues
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLeaguesRequest"
        required: true
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid request
    get:
      tags:
        - leagues
      summary: リーグ一覧取得
      description: 登録されているリーグの一覧を取得する
      operationId: findAllLeagues
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Leagues"
        "400":
          description: Invalid request

  /leagues/{leagueId}:
    get:
      tags:
        - leagues
      summary: リーグ取得
      description: 指定したリーグの情報を取得する
      operationId: findLeague
      parameters:
        - name: leagueId
          in: path
          description: リーグID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/League"
            #     required:
            #       - league
            #     properties:
            #       league:
            #         $ref: "#/components/schemas/League"
            #       gameIds:
            #         type: array
            #         items:
            #           type: string
            #           format: uuid
        "400":
          description: Invalid request
        "404":
          description: League not found
    put:
      tags:
        - leagues
      summary: リーグ更新
      description: 指定したリーグの情報を更新する
      operationId: updateLeague
      parameters:
        - name: leagueId
          in: path
          description: リーグID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateLeagueRequest"
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid request
        "404":
          description: League not found
    delete:
      tags:
        - leagues
      summary: リーグ削除
      description: 指定したリーグの情報を削除する
      operationId: deleteLeague
      parameters:
        - name: leagueId
          in: path
          description: リーグID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid request
        "404":
          description: League not found

  /leagues/{leagueId}/players:
    post:
      tags:
        - leagues
      summary: リーグ参加プレイヤー登録
      description: リーグ参加プレイヤーを新規登録する
      operationId: createLeaguePlayers
      parameters:
        - name: leagueId
          in: path
          description: リーグID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                playerIds:
                  type: array
                  items:
                    type: string
                    format: uuid
        required: true
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid request
    get:
      tags:
        - leagues
      summary: リーグ参加プレイヤー一覧取得
      description: 指定したリーグに参加しているプレイヤー一覧情報を取得する
      operationId: findLeaguePlayers
      parameters:
        - name: leagueId
          in: path
          description: リーグID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Players"
        "400":
          description: Invalid request
        "404":
          description: League not found

  /leagues/{leagueId}/games:
    post:
      tags:
        - leagues
      summary: ゲーム登録
      description: ゲームを新規登録する
      operationId: createGames
      parameters:
        - name: leagueId
          in: path
          description: リーグID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGameRequest"
            example:
              eventDate: "2024-11-01"
              ruleId: "afc8079a-10b6-45fb-a5f2-a74f327d294e"
              umaId: "4261f5d8-4b77-4138-bfef-9c5cfdf34aeb"
              playerResults:
                - playerId: "fc4a5235-e5fa-497f-9392-e8755526008f"
                  score: 25000
                  gameStartWind: "EAST"
                - playerId: "0e989b95-2525-495c-afc5-b88e2fbcb5ff"
                  score: 25000
                  gameStartWind: "SOUTH"
                - playerId: "0621eda8-2977-4772-b180-e72cbbed1862"
                  score: 25000
                  gameStartWind: "WEST"
                - playerId: "0de51700-e45c-4a39-9a95-40f002fe7165"
                  score: 25000
                  gameStartWind: "NORTH"
        required: true
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid request

    get:
      tags:
        - leagues
      summary: リーグ内ゲーム一覧取得
      description: 登録されているゲームの一覧を取得する
      operationId: findLeagueGames
      parameters:
        - name: leagueId
          in: path
          description: リーグID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Game"
        "400":
          description: Invalid request

  # ゲーム関連API
  /games/{gameId}:
    get:
      tags:
        - games
      summary: ゲーム取得
      description: 指定したゲームの情報を取得する
      operationId: findGame
      parameters:
        - name: gameId
          in: path
          description: ゲームID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Game"
        "400":
          description: Invalid request
        "404":
          description: Game not found
    put:
      tags:
        - games
      summary: ゲーム更新
      description: 指定したゲームの情報を更新する
      operationId: updateGame
      parameters:
        - name: gameId
          in: path
          description: ゲームID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateGameRequest"
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid request
        "404":
          description: Game not found
    delete:
      tags:
        - games
      summary: ゲーム削除
      description: 指定したゲームの情報を削除する
      operationId: deleteGame
      parameters:
        - name: gameId
          in: path
          description: ゲームID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid request
        "404":
          description: Game not found

components:
  schemas:
    ########### プレイヤー関連スキーマ ###########
    Player:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
        name:
          type: string

    CreatePlayerParams:
      type: object
      required:
        - name
      properties:
        name:
          type: string

    CreatePlayersRequest:
      type: object
      required:
        - players
      properties:
        players:
          type: array
          items:
            $ref: "#/components/schemas/CreatePlayerParams"
    UpdatePlayerRequest:
      $ref: "#/components/schemas/CreatePlayerParams"

    Players:
      type: object
      required:
        - players
      properties:
        players:
          type: array
          items:
            $ref: "#/components/schemas/Player"

    ########### リーグ関連スキーマ ###########
    League:
      type: object
      required:
        - id
        - name
        - startAt
      properties:
        id:
          type: string
        name:
          type: string
        startAt:
          type: string
          format: date
        endAt:
          type: string
          format: date

    CreateLeagueParams:
      type: object
      required:
        - name
        - startAt
      properties:
        name:
          type: string
        startAt:
          type: string
          format: date
        endAt:
          type: string
          format: date

    CreateLeaguesRequest:
      type: object
      required:
        - leagues
      properties:
        leagues:
          type: array
          items:
            $ref: "#/components/schemas/CreateLeagueParams"
    UpdateLeagueRequest:
      $ref: "#/components/schemas/CreateLeagueParams"

    Leagues:
      type: object
      required:
        - leagues
      properties:
        leagues:
          type: array
          items:
            $ref: "#/components/schemas/League"

    ########### ゲーム関連スキーマ ###########
    Game:
      type: object
      required:
        - id
        - rule
        - uma
        - playerResults
        - eventDate
      properties:
        id:
          type: string
          format: uuid
        rule:
          $ref: "#/components/schemas/Rule"
        uma:
          $ref: "#/components/schemas/Uma"
        playerResults:
          minLength: 4
          maxLength: 4
          type: array
          items:
            $ref: "#/components/schemas/PlayerResult"
        eventDate:
          type: string
          format: date
          example: "2024-01-01"

    CreateGameRequest:
      type: object
      required:
        - eventDate
        - ruleId
        - umaId
        - playerResults
      properties:
        eventDate:
          type: string
          format: date
          example: "2024-01-01"
        ruleId:
          type: string
          format: uuid
          example: "afc8079a-10b6-45fb-a5f2-a74f327d294e"
        umaId:
          type: string
          format: uuid
          example: "4261f5d8-4b77-4138-bfef-9c5cfdf34aeb"
        playerResults:
          minLength: 4
          maxLength: 4
          type: array
          items:
            $ref: "#/components/schemas/CreatePlayerResultParams"

    CreatePlayerResultParams:
      type: object
      required:
        - playerId
        - score
        - gameStartWind
      properties:
        playerId:
          type: string
          example: "0e989b95-2525-495c-afc5-b88e2fbcb5ff"
          format: uuid
        score:
          type: integer
          example: 25000
          description: ウマオカ計算前のゲーム終了時の得点
        gameStartWind:
          type: string
          example: "EAST"
          enum:
            - "EAST"
            - "SOUTH"
            - "WEST"
            - "NORTH"

    UpdateGameRequest:
      $ref: "#/components/schemas/CreateGameRequest"

    PlayerResult:
      type: object
      required:
        - player
        - score
        - result
      properties:
        player:
          $ref: "#/components/schemas/Player"
        score:
          type: number
          format: float
          example: 60
        result:
          type: integer
          example: 1

    Rule:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "半荘"

    Uma:
      type: object
      required:
        - name
        - secondPlaceRate
        - firstPlaceRate
      properties:
        name:
          type: string
          example: 10-20
        secondPlaceRate:
          type: integer
          example: 10
        firstPlaceRate:
          type: integer
          example: 20
